require('dotenv').config();
const express = require('express');
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');
const cors = require('cors');
const app = express();
app.use(cors());
app.use(express.json());

mongoose.connect(process.env.MONGO_URI, { useNewUrlParser: true, useUnifiedTopology: true });

const userSchema = new mongoose.Schema({
  nom: String, prenom: String, dateNaissance: Date, phone: { type: String, unique: true }, email: String,
  passwordHash: String, avatar: String, verified: { type: Boolean, default: false }, pro: { type: Boolean, default: false },
  subscription: { type: String, enum: ['free', 'triton'], default: 'free' }, createdAt: { type: Date, default: Date.now }
});
const postSchema = new mongoose.Schema({
  title: String, desc: String, price: Number, category: String, condition: String, city: String,
  qty: Number, nego: Boolean, delivery: Boolean, story: Boolean, boost: Boolean,
  sellerId: String, sellerName: String, images: [String], likes: { type: Number, default: 0 },
  archived: { type: Boolean, default: false }, createdAt: { type: Date, default: Date.now }
});
const User = mongoose.model('User', userSchema);
const Post = mongoose.model('Post', postSchema);

// Routes
app.post('/api/register', async (req, res) => {
  try {
    const { nom, prenom, phone, email, password } = req.body;
    const passwordHash = await bcrypt.hash(password, 12);
    const user = new User({ nom, prenom, phone, email, passwordHash, verified: false, pro: false });
    await user.save();
    const token = jwt.sign({ id: user._id }, process.env.JWT_SECRET, { expiresIn: '30d' });
    res.json({ token, user });
  } catch (e) { res.status(500).json({ error: e.message }); }
});

app.post('/api/login', async (req, res) => {
  const { login, password } = req.body;
  const user = await User.findOne({ $or: [{ phone: login }, { email: login }] });
  if (!user) return res.status(400).json({ error: 'Utilisateur inconnu' });
  const ok = await bcrypt.compare(password, user.passwordHash);
  if (!ok) return res.status(400).json({ error: 'Mot de passe incorrect' });
  const token = jwt.sign({ id: user._id }, process.env.JWT_SECRET, { expiresIn: '30d' });
  res.json({ token, user });
});

app.get('/api/posts', async (req, res) => res.json(await Post.find().sort({ createdAt: -1 })));
app.post('/api/posts', async (req, res) => {
  const post = new Post(req.body);
  await post.save();
  res.json(post);
});

const PORT = process.env.PORT || 5000;
app.listen(PORT, () => console.log(`Serveur lanc√© sur ${PORT}`));
